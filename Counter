#Code for Counter 
#include <stdio.h>
#include <time.h>

void delay(int n) {
    int us = n; // microseconds
    clock_t start_time = clock();
    while (clock() < start_time + (us * CLOCKS_PER_SEC / 1000000));
}

void display(int count) // Function to display the data on the four Led's
{
	printf("Count value is: %d\n", count);						
}

int main()
{
	int count = 0x00000000;
	while (1)
	{
		display(count);
		count++;
        if(count==16){
            count=0;
        }
		delay(500000);   // delay by 0.5 microseconds
	}
}

Assembly version from Godblot compiler 

delay(int):
        addi    sp,sp,-16
        sw      ra,12(sp)
        sw      s0,8(sp)
        mv      s0,a0
        call    clock
        add     s0,s0,a0
.L2:
        call    clock
        blt     a0,s0,.L2
        lw      ra,12(sp)
        lw      s0,8(sp)
        addi    sp,sp,16
        jr      ra
.LC0:
        .string "Count value is: %d\n"
display(int):
        addi    sp,sp,-16
        sw      ra,12(sp)
        mv      a1,a0
        lui     a0,%hi(.LC0)
        addi    a0,a0,%lo(.LC0)
        call    printf
        lw      ra,12(sp)
        addi    sp,sp,16
        jr      ra
main:
        addi    sp,sp,-16
        sw      ra,12(sp)
        sw      s0,8(sp)
        sw      s1,4(sp)
        sw      s2,0(sp)
        li      s0,0
        li      s2,16
        li      s1,499712
        addi    s1,s1,288
.L9:
        mv      a0,s0
        call    display(int)
        addi    s0,s0,1
        sub     a5,s0,s2
        snez    a5,a5
        neg     a5,a5
        and     s0,s0,a5
        mv      a0,s1
        call    delay(int)
        j       .L9

Assembly Version for the ARDUINO
__SP_H__ = 0x3e
__SP_L__ = 0x3d
__SREG__ = 0x3f
__tmp_reg__ = 0
__zero_reg__ = 1
delay(int):
        push r4
        push r5
        push r6
        push r7
        push r8
        push r9
        push r10
        push r11
        push r12
        push r13
        push r14
        push r15
.L__stack_usage = 12
        mov r8,r24
        mov r9,r25
        rcall clock
        mov r4,r22
        mov r5,r23
        mov r6,r24
        mov r7,r25
        mov __tmp_reg__,r9
        lsl r0
        sbc r10,r10
        sbc r11,r11
.L2:
        rcall clock
        mov r12,r22
        mov r13,r23
        mov r14,r24
        mov r15,r25
        lds r22,_CLOCKS_PER_SEC_
        lds r23,_CLOCKS_PER_SEC_+1
        mov __tmp_reg__,r23
        lsl r0
        sbc r24,r24
        sbc r25,r25
        mov r21,r11
        mov r20,r10
        mov r19,r9
        mov r18,r8
        rcall __mulsi3
        ldi r18,lo8(64)
        ldi r19,lo8(66)
        ldi r20,lo8(15)
        ldi r21,0
        rcall __udivmodsi4
        mov r27,r21
        mov r26,r20
        mov r25,r19
        mov r24,r18
        add r24,r4
        adc r25,r5
        adc r26,r6
        adc r27,r7
        cp r12,r24
        cpc r13,r25
        cpc r14,r26
        cpc r15,r27
        brlo .L2
        pop r15
        pop r14
        pop r13
        pop r12
        pop r11
        pop r10
        pop r9
        pop r8
        pop r7
        pop r6
        pop r5
        pop r4
        ret
.LC0:
        .string "Count value is: %d\n"
display(int):
.L__stack_usage = 0
        push r25
        push r24
        ldi r24,lo8(.LC0)
        ldi r25,hi8(.LC0)
        push r25
        push r24
        rcall printf
        pop __tmp_reg__
        pop __tmp_reg__
        pop __tmp_reg__
        pop __tmp_reg__
ret
main:
.L__stack_usage = 0
        ldi r28,0
        ldi r29,0
        rjmp .L7
.L6:
        ldi r24,lo8(32)
        ldi r25,lo8(-95)
        rcall delay(int)
.L7:
        mov r24,r28
        mov r25,r29
        rcall display(int)
        adiw r28,1
        cpi r28,16
        cpc r29,__zero_reg__
        brne .L6
        ldi r28,0
        ldi r29,0
        rjmp .L6

Assembly Version for the Intel Compiler 
delay(int):                              # @delay(int)
        push    rbx
        mov     ebx, edi
        call    clock@PLT
        movsxd  rbx, ebx
        add     rbx, rax
.LBB0_1:                                # =>This Inner Loop Header: Depth=1
        call    clock@PLT
        cmp     rax, rbx
        jl      .LBB0_1
        pop     rbx
        ret
display(int):                            # @display(int)
        mov     esi, edi
        lea     rdi, [rip + .L.str]
        xor     eax, eax
        jmp     printf@PLT                      # TAILCALL
main:                                   # @main
        push    rbp
        push    r15
        push    r14
        push    rbx
        push    rax
        xor     r15d, r15d
        lea     rbx, [rip + .L.str]
        xor     ebp, ebp
.LBB2_1:                                # =>This Loop Header: Depth=1
        mov     rdi, rbx
        mov     esi, ebp
        xor     eax, eax
        call    printf@PLT
        inc     ebp
        call    clock@PLT
        mov     r14, rax
        add     r14, 500000
.LBB2_2:                                #   Parent Loop BB2_1 Depth=1
        call    clock@PLT
        cmp     rax, r14
        jl      .LBB2_2
        cmp     ebp, 16
        cmove   ebp, r15d
        jmp     .LBB2_1
.L.str:
        .asciz  "Count value is: %d\n"


Assembly Version for ARM 
delay(int):
        push    {r4, lr}
        mov     r4, r0
        bl      clock
        add     r4, r0, r4
.LBB0_1:                                @ =>This Inner Loop Header: Depth=1
        bl      clock
        cmp     r0, r4
        blt     .LBB0_1
        pop     {r4, lr}
        bx      lr
display(int):
        push    {r11, lr}
        mov     r1, r0
        ldr     r0, .LCPI1_0
        bl      printf
        pop     {r11, lr}
        bx      lr
.LCPI1_0:
        .long   .L.str
main:
        mov     r5, #0
        mov     r4, #288
        orr     r4, r4, #499712
.LBB2_1:                                @ =>This Inner Loop Header: Depth=1
        mov     r0, r5
        bl      display(int)
        mov     r0, r4
        bl      delay(int)
        add     r0, r5, #1
        subs    r5, r0, #16
        movne   r5, r0
        b       .LBB2_1
.L.str:
        .asciz  "Count value is: %d\n"



